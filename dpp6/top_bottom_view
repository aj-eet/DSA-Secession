//top view of a tree submitted on gfg 
  void solve(Node* root,int d,vector<int>&ans)
    {
       
        if(root==NULL)
        return;
        queue<pair<Node*,int>>q;
        q.push({root,d});
        map<int,vector<int>>m;
        while(q.empty()==false)
        {
            Node *curr=q.front().first;
            int hd=q.front().second;
            q.pop();
            m[hd].push_back(curr->data);
            if(curr->left!=NULL)
            q.push({curr->left,hd-1});
            if(curr->right!=NULL)
            q.push({curr->right,hd+1});
            
        }
        for(auto it:m)
        {
            ans.push_back(it.second[0]);
        }
        
    }
    vector<int> topView(Node *root)
    {
        //Your code here
        vector<int>ans;
        solve(root,0,ans);
        return ans;
        
    }
   // bottom view of a binary tree;
   void solve(Node* root,int d ,vector<int>&ans)
  {
      if(root==NULL)
      return ;
      queue<pair<Node*,int>>q;
      q.push({root,d});
      map<int,int>m;
      while(q.empty()==false)
      {
          Node*curr=q.front().first;
          int hd=q.front().second;
          q.pop();
          m[hd]=curr->data;
          if(curr->left!=NULL)
          q.push({curr->left,hd-1});
          if(curr->right!=NULL)
          q.push({curr->right,hd+1});
      }
      for(auto it:m)
      {
          ans.push_back(it.second);
      }

      
  }
    vector <int> bottomView(Node *root) {
        // Your Code Here
        vector<int>ans;
        solve(root,0,ans);
        return ans;
        
    }
    
